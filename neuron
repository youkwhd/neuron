#!/usr/bin/julia

include("lib/Neuron.jl")

network =
    Neuron.Network([
        Neuron.Layer(2),
        Neuron.Layer(2),
        Neuron.Layer(1),
    ])

dataset = [
    # XOR
    [[0, 0], [0]],
    [[0, 1], [1]],
    [[1, 0], [1]],
    [[1, 1], [0]],

    # OR
    # [[0, 0], [0]],
    # [[0, 1], [1]],
    # [[1, 0], [1]],
    # [[1, 1], [1]],

    # AND
    # [[0, 0], [0]],
    # [[0, 1], [0]],
    # [[1, 0], [0]],
    # [[1, 1], [1]],
]


Neuron.train(network, dataset)

# for data in dataset
#     result = Neuron.predict(network, convert(Vector{Float64}, data[1]))
#     println(Int64(round(result[1])))
#     println(network.layers)
# end

# println(network.layers)

input = convert(Vector{Float64}, [parse(Int64, ARGS[1]), parse(Int64, ARGS[2])])
result = Neuron.predict(network, input)
println(Int64(round(result[1])))
