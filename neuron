#!/usr/bin/julia


push!(LOAD_PATH, joinpath(pwd(), "lib"))

using Neuron
using Activation

function help()
    println("""$(PROGRAM_FILE): <bool> <bool> [--verbose] [--dataset <gate>]
               Neural network learning logic gates.

               Options:
                 -h, --help    Prints this message and exit.
                 --verbose     Print debug information.
                 --gate <gate> Use the specified gate instead of XOR gate,
                               can be either AND, OR, XOR, NAND, NOR, XNOR.""")
end

function main(args)
    verbose = false

    # TODO: parse literal "true" & "false"
    input = [parse(Int, popfirst!(args)), parse(Int, popfirst!(args))]

    dataset = [
        [[0, 0], [0]],
        [[0, 1], [1]],
        [[1, 0], [1]],
        [[1, 1], [0]],
    ]

        # OR
        # [[0, 0], [0]],
        # [[0, 1], [1]],
        # [[1, 0], [1]],
        # [[1, 1], [1]],

        # AND
        # [[0, 0], [0]],
        # [[0, 1], [0]],
        # [[1, 0], [0]],
        # [[1, 1], [1]],

        # NAND
        # [[0, 0], [1]],
        # [[0, 1], [1]],
        # [[1, 0], [1]],
        # [[1, 1], [0]],

        # NOR
        # [[0, 0], [1]],
        # [[0, 1], [0]],
        # [[1, 0], [0]],
        # [[1, 1], [0]],

    for i = 1:length(args)
        if args[i] == "-h" || args[i] == "--help"
            help()
            exit()
        end

        if args[i] == "-v" || args[i] == "--verbose"
            VERBOSE[] = true
            continue
        end

        if args[i] == "--gate"
            i += 1
            dataset = args[i]
            continue
        end

        help()
        exit(1)
    end

    network =
        Neuron.Network([
            Neuron.Layer(2),
            Neuron.Layer(2),
            Neuron.Layer(1),
        ])

    Neuron.train(network, dataset)

    for data in dataset
        result = Neuron.predict(network, convert(Vector{Float64}, data[1]))
        println(data[1], " ~", last(network.layers).neurons[1], " => ", result[1])
    end
end

if abspath(PROGRAM_FILE) == @__FILE__
    main(ARGS)
end
